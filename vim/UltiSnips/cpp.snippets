snippet fre "freopen" b
freopen("`!p snip.rv = snip.basename`.in","r",stdin);
freopen("`!p snip.rv = snip.basename`.out","w",stdout);
$0
endsnippet

snippet init "template code" b
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
int main()
{
	cin.tie(0) -> sync_with_stdio(0);
	$0
}
endsnippet

snippet combo "combo code" b
const ll MOD = 1e9 + 7;
const ll MAXN = 1e6;
ll fac[MAXN+1],inv[MAXN+1];
//computes x^y mod MOD
ll exp(ll x, ll y)
{
	if(y == 1)
		return x;
	if(y & 1)
		return (x * exp(x,y-1,MOD)) % MOD;
	return exp((x*x) % MOD, y/2, MOD);
}
//precompute factorials
void factorial()
{
	fac[0] = 1;
	for(int ii = 1; ii <= MAXN; ii++)
	{
		fac[ii] = fac[ii-1] * ii % MOD;
	}
}
//precompute inverse factorials
void inverses()
{
	inv[0] = 1;
	for(int ii = 1; ii <= MAXN; ii++)
	{
		inv[ii] = exp(fac[ii], MOD-2, MOD);
		//cout << inv[ii] << '\n';
	}
}
endsnippet

snippet dsu "Distinct Set Union" b
//DSU code from usaco.guide
struct DSU {
	vector<int> e;
	DSU(int N) { e = vector<int>(N, -1); }

	// get representive component (uses path compression)
	int get(int x) { return e[x] < 0 ? x : e[x] = get(e[x]); }

	bool same_set(int a, int b) { return get(a) == get(b); }

	int size(int x) { return -e[get(x)]; }

	bool unite(int x, int y) {  // union by size
		x = get(x), y = get(y);
		if (x == y) return false;
		if (e[x] > e[y]) swap(x, y);
		e[x] += e[y]; e[y] = x;
		return true;
	}
};
endsnippet
